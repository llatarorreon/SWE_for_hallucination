{"model_name_or_path": "default__gpt-4o__t-0.00__p-1.00__c-2.00___swe_bench_lite_test", "instance_id": "django__django-16139", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\ndiff --git a/manage.py b/manage.py\nnew file mode 100644\nindex 0000000000..92c2e2f659\n--- /dev/null\n+++ b/manage.py\n@@ -0,0 +1,17 @@\n+\n+#!/usr/bin/env python\n+import os\n+import sys\n+\n+if __name__ == '__main__':\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\n+            \"Couldn't import Django. Are you sure it's installed and \"\n+            \"available on your PYTHONPATH environment variable? Did you \"\n+            \"forget to activate a virtual environment?\"\n+        ) from exc\n+    execute_from_command_line(sys.argv)\n\\ No newline at end of file\ndiff --git a/run_tests.py b/run_tests.py\nnew file mode 100644\nindex 0000000000..8d522c8f57\n--- /dev/null\n+++ b/run_tests.py\n@@ -0,0 +1,15 @@\n+\n+import os\n+import django\n+from django.conf import settings\n+from django.test.utils import get_runner\n+\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'\n+django.setup()\n+\n+TestRunner = get_runner(settings)\n+test_runner = TestRunner()\n+failures = test_runner.run_tests(['tests.auth_tests'])\n+\n+if failures:\n+    exit(1)\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..62484d2ac7\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,19 @@\n+\n+INSTALLED_APPS = [\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'tests.auth_tests',\n+    'django.contrib.sites',\n+]\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+SECRET_KEY = 'test-secret-key'\n+\n+USE_TZ = True\n+TIME_ZONE = 'UTC'\n\\ No newline at end of file\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 3bacd7a9fb..72f02a06a8 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -892,6 +892,11 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    def test_password_help_text_url(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(instance=user)\n+        expected_url = f\"../../{user.pk}/password/\"\n+        self.assertIn(expected_url, form.fields['password'].help_text)\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n"}