{"model_name_or_path": "default__gpt-4o-mini__t-0.00__p-1.00__c-2.00___swe_bench_lite_dev", "instance_id": "pvlib__pvlib-python-1606", "model_patch": "diff --git a/pvlib/tools.py b/pvlib/tools.py\nindex 991568f..13953f1 100644\n--- a/pvlib/tools.py\n+++ b/pvlib/tools.py\n@@ -300,6 +300,11 @@ def _build_args(keys, input_dict, dict_name):\n # Modified: November, 2020 by C. W. Hansen, to add atol and change exit\n # criteria\n def _golden_sect_DataFrame(params, lower, upper, func, atol=1e-8):\n+    # Handle the case where lower and upper bounds are equal\n+    if np.all(lower == upper):\n+        return lower, np.array([0])  # Return a valid value for the optimization\n+        return lower, np.array([])  # or handle as appropriate for your use case\n+\n     \"\"\"\n     Vectorized golden section search for finding maximum of a function of a\n     single variable.\ndiff --git a/reproduce.py b/reproduce.py\nnew file mode 100644\nindex 0000000..f4a74eb\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,55 @@\n+\n+import os\n+import pathlib\n+import time\n+import json\n+from datetime import datetime\n+from time import mktime, gmtime\n+\n+import pandas as pd\n+\n+from pvlib import pvsystem\n+from pvlib import location as pvlocation\n+from pvlib import modelchain\n+from pvlib.temperature import TEMPERATURE_MODEL_PARAMETERS as PARAMS # not used -- to remove\n+from pvlib.bifacial.pvfactors import pvfactors_timeseries\n+from pvlib.temperature import TEMPERATURE_MODEL_PARAMETERS\n+\n+class PV:\n+    def pv_transform_time(self, val):\n+        tt = gmtime(val)\n+        dd = datetime.fromtimestamp(mktime(tt))\n+        timestamp = pd.Timestamp(dd)\n+        return timestamp\n+\n+    def __init__(self, model: str, inverter: str, latitude: float, longitude: float, **kwargs):\n+        temperature_model_parameters = TEMPERATURE_MODEL_PARAMETERS[\"sapm\"][\"open_rack_glass_glass\"]\n+        modules = pvsystem.retrieve_sam(\"cecmod\")\n+        inverters = pvsystem.retrieve_sam(\"cecinverter\")\n+        module_parameters = modules[model]\n+        inverter_parameters = inverters[inverter]\n+\n+        location = pvlocation.Location(latitude=latitude, longitude=longitude)\n+        system = pvsystem.PVSystem(module_parameters=module_parameters, inverter_parameters=inverter_parameters, temperature_model_parameters=temperature_model_parameters)\n+        self.modelchain = modelchain.ModelChain(system, location, aoi_model='no_loss', spectral_model=\"no_loss\")\n+\n+    def process(self, data):\n+        weather = pd.read_json(data)\n+        weather.drop('time.1', axis=1, inplace=True)\n+        weather['time'] = pd.to_datetime(weather['time']).map(datetime.timestamp)\n+        weather[\"time\"] = weather[\"time\"].apply(self.pv_transform_time)\n+        weather.index = weather[\"time\"]\n+\n+        # simulate\n+        self.modelchain.run_model(weather)\n+        print(self.modelchain.results.ac)\n+\n+# good data\n+good_data = \"{\\\"time\\\":{\\\"12\\\":\\\"2010-01-01 13:30:00+00:00\\\"},\\\"ghi\\\":{\\\"12\\\":36},\\\"dhi\\\":{\\\"12\\\":36},\\\"dni\\\":{\\\"12\\\":0},\\\"Tamb\\\":{\\\"12\\\":8.0},\\\"WindVel\\\":{\\\"12\\\":5.0},\\\"WindDir\\\":{\\\"12\\\":270},\\\"time.1\\\":{\\\"12\\\":\\\"2010-01-01 13:30:00+00:00\\\"}}\"\n+\n+# data that causes error\n+data = \"{\\\"time\\\":{\\\"4\\\":\\\"2010-01-01 05:30:00+00:00\\\"},\\\"ghi\\\":{\\\"4\\\":0},\\\"dhi\\\":{\\\"4\\\":0},\\\"dni\\\":{\\\"4\\\":0},\\\"Tamb\\\":{\\\"4\\\":8.0},\\\"WindVel\\\":{\\\"4\\\":4.0},\\\"WindDir\\\":{\\\"4\\\":240},\\\"time.1\\\":{\\\"4\\\":\\\"2010-01-01 05:30:00+00:00\\\"}}\"\n+p1 = PV(model=\"Trina_Solar_TSM_300DEG5C_07_II_\", inverter=\"ABB__MICRO_0_25_I_OUTD_US_208__208V_\", latitude=51.204483, longitude=5.265472)\n+p1.process(good_data)\n+print(\"=====\")\n+p1.process(data)\n\\ No newline at end of file\n"}